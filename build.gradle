buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
  }
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'groovy'
	apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: "me.champeau.gradle.jmh"

	sourceCompatibility = 1.8
	version = '0.0.3'

	repositories {
		mavenCentral()
		maven {
			url "http://repo.spring.io/libs-release"
			"https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		compile 'org.uncommons:uncommons-maths:1.2'
 		compile 'log4j:log4j:1.2.16'
		compile 'org.springframework:spring-context:4.1.7.RELEASE'
		compile 'org.hibernate:hibernate-validator:5.2.0.Alpha1'
		compile 'javax.validation:validation-api:1.0.0.GA'
		compile 'org.springframework:spring-oxm:4.1.3.RELEASE'
		compile 'org.spockframework:spock-core:0.7-groovy-2.0'
		compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
		compile 'org.codehaus.groovy:groovy-all:2.4.3'
		compile 'commons-io:commons-io:1.4'
		compile 'com.google.guava:guava:18.0'
		compile 'org.apache.commons:commons-math3:3.3'
		compile 'org.apache.commons:commons-lang3:3.1'
		testCompile group: 'junit', name: 'junit', version: '4.+'		
	}
}

test { systemProperties 'property': 'value'  }

project(':yoink-core-api'){
	 dependencies{  }
}

project(':yoink-core-cluster'){
	dependencies{
		compile project(':yoink-core-api')
		compile project(':yoink-core-region')
		compile 'log4j:log4j:1.2.16'
		compile "org.neo4j:neo4j:3.0.1"
	}
}

project(':yoink-core-math'){
	dependencies{ compile project(':yoink-core-api')  }
}

project(':yoink-core-molecule'){
	javadoc { exclude "**/xml_cml/**" }
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
	}
}

project(':yoink-core-density'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
	}
}

project(':yoink-core-cube'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
	}
}

project(':yoink-core-adaptive'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
	}
}

project(':yoink-core-region'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-cube')
		
	}
}

project(':yoink-core-plugin'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-cube')
		compile project(':yoink-core-region')
	}
}

project(':yoink-core-batch'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-adaptive')
		compile project(':yoink-core-region')
		compile project(':yoink-core-cluster')
		compile project(':yoink-core-plugin')
		compile 'org.springframework:spring-jms:4.2.4.RELEASE'
		compile 'org.apache.activemq:activemq-broker:5.13.0'
		compile 'org.apache.activemq:activemq-core:5.7.0'
		compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.3.5.RELEASE'
		compile group: 'org.springframework.boot', name: 'spring-boot-starter-batch', version: '1.3.5.RELEASE'

	}
}


apply plugin: 'spring-boot'
apply plugin: 'application'

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		 maven {
			 url "https://plugins.gradle.org/m2/"
			 }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.7.RELEASE")
		classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
	}
}

dependencies {
 compile project(':yoink-core-batch')

	}

configurations { all*.exclude module : 'spring-boot-starter-logging' }

mainClassName = 'org.wallerlab.yoink.Application'


// Simple 'alias' for calling yoink, instead of more cryptic bootRun.
task yoink(dependsOn: bootRun)

// generate one jar file for multi projects

/**
subprojects.each { subproject -> evaluationDependsOn(subproject.path)}
task allJar(type: Jar, dependsOn: subprojects.assemble) {
        zip64 = true
	baseName = 'Yoink'
	subprojects.each { subproject ->
		manifest {
			attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version,
			'Main-Class':'org.wallerlab.yoink.Yoink',
			"Class-Path": subproject.configurations.compile.collect { it.getName() }.join(' ')
		}
             from{
			configurations.compile.collect{
				it.isDirectory() ? it:zipTree(it)
			}
			configurations.runtime.collect{
				it.isDirectory() ? it:zipTree(it)
			}
		}

		from subproject.configurations.archives.allArtifacts.files.collect { zipTree(it) }
	}
}

artifacts { archives allJar  }

*/
//generate one java docs for multi projects
//command-line type: ./gradlew alljavadoc
def exportedProjects= [
	":yoink-core-api",
	":yoink-core-math",
	":yoink-core-molecule",
	":yoink-core-density",
	":yoink-core-cube",
	":yoink-core-batch",
	":yoink-core-adaptive",
	":yoink-core-region",
	":yoink-core-plugin"
]
task alljavadoc(type: Javadoc) {
	exclude "**/xml_cml/**"
	source exportedProjects.collect { project(it).sourceSets.main.allJava }
	classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
	destinationDir = file("${buildDir}/docs/javadoc")

}




task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

  afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/xml_cml/**'])
            })
    }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}
