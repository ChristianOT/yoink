buildscript {
	repositories {
    	jcenter()
        mavenCentral()
		maven { url "https://m2.neo4j.org" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.spring.io/libs-release" }
		maven { url 'https://repo.spring.io/libs-snapshot' }
    }
	dependencies {
		classpath "gradle.plugin.me.champeau.gradle:jmh-gradle-plugin:0.3.0"
		classpath 'io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'
	}
}


allprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'groovy'
	apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	apply plugin: 'io.spring.dependency-management'

	version = '0.0.3'
	sourceCompatibility = 1.8

	dependencyManagement {
		imports {
			mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
			mavenBom 'org.springframework.boot:spring-boot-starter-parent:1.2.1.RELEASE'

		}
	}

	repositories {
		mavenCentral()
		jcenter()
		maven { url "https://m2.neo4j.org" }
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.spring.io/libs-release" }
		maven { url 'https://repo.spring.io/libs-snapshot' }
	}

	dependencies {
		compile 'com.google.guava:guava:18.0'
		compile 'org.springframework:spring-core'
		compile 'org.springframework:spring-context'

		testCompile 'junit:junit:4.+'
		testCompile 'org.codehaus.groovy:groovy-all:2.4.7'
		testCompile 'org.spockframework:spock-core:1.1-groovy-2.4-rc-1'
	}
}

test { systemProperties 'property': 'value'  }

project(':yoink-core-api'){
	 dependencies{ }
}

project(':yoink-core-cluster'){
	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://repo.spring.io/libs-snapshot' }
		maven { url "https://repo.spring.io/libs-release" }
		maven { url "https://m2.neo4j.org" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies{
		compile project(':yoink-core-api')
		compile project(':yoink-core-region')
		compile 'org.springframework:spring-oxm'
		compile 'org.neo4j:neo4j-ogm-core:2.0.4'
		compile 'org.neo4j:neo4j-ogm-http-driver:2.0.4'
		compile 'org.neo4j:neo4j-ogm-embedded-driver:2.0.4'
		compile 'org.springframework.data:spring-data-neo4j:4.2.0.BUILD-SNAPSHOT'
	}
}

project(':yoink-core-math'){
	dependencies{
        compile project(':yoink-core-api')
        compile 'org.apache.commons:commons-math3:3.6.1'
    }
}

project(':yoink-core-molecule'){
	javadoc { exclude "**/xml_cml/**" }
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile 'org.springframework:spring-oxm'
		compile group: 'commons-io', name: 'commons-io', version: '2.5'

	}
}

project(':yoink-core-density'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
	}
}

project(':yoink-core-cube'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
	}
}

project(':yoink-core-benchmark'){

	apply plugin: "me.champeau.gradle.jmh"

	dependencies {
		compile project(':yoink-core-api')
		compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.13'
	}

	jmh {
		include = 'org\\.wallerlab\\.yoink\\.benchmark\\.*'
		zip64 = true
		iterations = 5 // Number of measurement iterations to do.
		warmup = '1s' // Time to spend at each warmup iteration.
		warmupForks = 0 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
		warmupIterations = 3 // Number of warmup iterations to do.
		warmupBatchSize = 5 // Warmup batch size: number of benchmark method calls per operation.

	}
}

project(':yoink-core-adaptive'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
	}
}

project(':yoink-core-region'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-cube')
	}
}

project(':yoink-core-plugin'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-cube')
		compile project(':yoink-core-region')
	}
}

project(':yoink-core-batch'){
	dependencies {
		compile project(':yoink-core-api')
		compile project(':yoink-core-math')
		compile project(':yoink-core-molecule')
		compile project(':yoink-core-density')
		compile project(':yoink-core-adaptive')
		compile project(':yoink-core-region')
		compile project(':yoink-core-cluster')
		compile project(':yoink-core-plugin')
		compile 'org.springframework:spring-jms'
		compile 'org.apache.activemq:activemq-broker'
		compile 'org.apache.activemq:activemq-core:5.7.0'
		compile 'org.springframework.boot:spring-boot-starter'
		compile 'org.springframework.boot:spring-boot-starter-batch'
	}
}


apply plugin: 'spring-boot'
apply plugin: 'application'


buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.6.RELEASE")
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}


dependencies {
	compile project(':yoink-core-batch')
    compile 'org.springframework.boot:spring-boot-starter'
    compile 'org.springframework.boot:spring-boot-starter-batch'
	testCompile 'junit:junit'
}

mainClassName = 'org.wallerlab.yoink.Application'

// Simple 'alias' for calling yoink, instead of more cryptic bootRun.
task yoink(dependsOn: bootRun)

//generate one java docs for multi projects
//command-line type: ./gradlew alljavadoc
def exportedProjects= [
	":yoink-core-api",
	":yoink-core-math",
	":yoink-core-molecule",
	":yoink-core-density",
	":yoink-core-cube",
	":yoink-core-batch",
	":yoink-core-adaptive",
	":yoink-core-region",
	":yoink-core-plugin",
	":yoink-core-benchmark"
]

task alljavadoc(type: Javadoc) {
	exclude "**/generated/**"
	exclude '**/xml_cml/**'
	source exportedProjects.collect { project(it).sourceSets.main.allJava }
	classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
	destinationDir = file("${buildDir}/docs/javadoc")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }

  afterEvaluate {
       classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/cml_v3/**','**/xml_cml/**'])
            })
    }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

configurations {
	//all*.exclude module : 'spring-boot-starter-logging'
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	testCompile 'junit:junit'
	integrationTestCompile 'org.assertj:assertj-core:3.5.2'
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
	reports.html.destination = file("${reporting.baseDir}/${name}")
}

task wrapper(type: Wrapper) { gradleVersion = '2.14.1'}
